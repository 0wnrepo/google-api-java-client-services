/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.sqladmin.model;

/**
 * A Cloud SQL instance resource.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud SQL Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DatabaseInstance extends com.google.api.client.json.GenericJson {

  /**
   * Connection name of the Cloud SQL instance used in connection strings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String connectionName;

  /**
   * The current disk usage of the instance in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long currentDiskSize;

  /**
   * The database engine type and version. Can be MYSQL_5_5 or MYSQL_5_6. Defaults to MYSQL_5_5. The
   * databaseVersion cannot be changed after instance creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String databaseVersion;

  /**
   * HTTP 1.1 Entity tag for the resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Name of the Cloud SQL instance. This does not include the project ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String instance;

  /**
   * The instance type. This can be one of the following. CLOUD_SQL_INSTANCE: Regular Cloud SQL
   * instance. READ_REPLICA_INSTANCE: Cloud SQL instance acting as a read-replica.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String instanceType;

  /**
   * The assigned IP addresses for the instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<IpMapping> ipAddresses;

  /**
   * The IPv6 address assigned to the instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ipv6Address;

  /**
   * This is always sql#instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * The name of the instance which will act as master in the replication setup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String masterInstanceName;

  /**
   * The maximum disk size of the instance in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long maxDiskSize;

  /**
   * The project ID of the project containing the Cloud SQL instance. The Google apps domain is
   * prefixed if applicable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String project;

  /**
   * The geographical region. Can be us-central, asia-east1 or europe-west1. Defaults to us-central.
   * The region can not be changed after instance creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String region;

  /**
   * The replicas of the instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> replicaNames;

  /**
   * SSL configuration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SslCert serverCaCert;

  /**
   * The service account email address assigned to the instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceAccountEmailAddress;

  /**
   * The user settings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Settings settings;

  /**
   * The current serving state of the Cloud SQL instance. This can be one of the following.
   * RUNNABLE: The instance is running, or is ready to run when accessed. SUSPENDED: The instance is
   * not available, for example due to problems with billing. PENDING_CREATE: The instance is being
   * created. MAINTENANCE: The instance is down for maintenance. UNKNOWN_STATE: The state of the
   * instance is unknown.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Connection name of the Cloud SQL instance used in connection strings.
   * @return value or {@code null} for none
   */
  public java.lang.String getConnectionName() {
    return connectionName;
  }

  /**
   * Connection name of the Cloud SQL instance used in connection strings.
   * @param connectionName connectionName or {@code null} for none
   */
  public DatabaseInstance setConnectionName(java.lang.String connectionName) {
    this.connectionName = connectionName;
    return this;
  }

  /**
   * The current disk usage of the instance in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCurrentDiskSize() {
    return currentDiskSize;
  }

  /**
   * The current disk usage of the instance in bytes.
   * @param currentDiskSize currentDiskSize or {@code null} for none
   */
  public DatabaseInstance setCurrentDiskSize(java.lang.Long currentDiskSize) {
    this.currentDiskSize = currentDiskSize;
    return this;
  }

  /**
   * The database engine type and version. Can be MYSQL_5_5 or MYSQL_5_6. Defaults to MYSQL_5_5. The
   * databaseVersion cannot be changed after instance creation.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabaseVersion() {
    return databaseVersion;
  }

  /**
   * The database engine type and version. Can be MYSQL_5_5 or MYSQL_5_6. Defaults to MYSQL_5_5. The
   * databaseVersion cannot be changed after instance creation.
   * @param databaseVersion databaseVersion or {@code null} for none
   */
  public DatabaseInstance setDatabaseVersion(java.lang.String databaseVersion) {
    this.databaseVersion = databaseVersion;
    return this;
  }

  /**
   * HTTP 1.1 Entity tag for the resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * HTTP 1.1 Entity tag for the resource.
   * @param etag etag or {@code null} for none
   */
  public DatabaseInstance setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Name of the Cloud SQL instance. This does not include the project ID.
   * @return value or {@code null} for none
   */
  public java.lang.String getInstance() {
    return instance;
  }

  /**
   * Name of the Cloud SQL instance. This does not include the project ID.
   * @param instance instance or {@code null} for none
   */
  public DatabaseInstance setInstance(java.lang.String instance) {
    this.instance = instance;
    return this;
  }

  /**
   * The instance type. This can be one of the following. CLOUD_SQL_INSTANCE: Regular Cloud SQL
   * instance. READ_REPLICA_INSTANCE: Cloud SQL instance acting as a read-replica.
   * @return value or {@code null} for none
   */
  public java.lang.String getInstanceType() {
    return instanceType;
  }

  /**
   * The instance type. This can be one of the following. CLOUD_SQL_INSTANCE: Regular Cloud SQL
   * instance. READ_REPLICA_INSTANCE: Cloud SQL instance acting as a read-replica.
   * @param instanceType instanceType or {@code null} for none
   */
  public DatabaseInstance setInstanceType(java.lang.String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * The assigned IP addresses for the instance.
   * @return value or {@code null} for none
   */
  public java.util.List<IpMapping> getIpAddresses() {
    return ipAddresses;
  }

  /**
   * The assigned IP addresses for the instance.
   * @param ipAddresses ipAddresses or {@code null} for none
   */
  public DatabaseInstance setIpAddresses(java.util.List<IpMapping> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  /**
   * The IPv6 address assigned to the instance.
   * @return value or {@code null} for none
   */
  public java.lang.String getIpv6Address() {
    return ipv6Address;
  }

  /**
   * The IPv6 address assigned to the instance.
   * @param ipv6Address ipv6Address or {@code null} for none
   */
  public DatabaseInstance setIpv6Address(java.lang.String ipv6Address) {
    this.ipv6Address = ipv6Address;
    return this;
  }

  /**
   * This is always sql#instance.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * This is always sql#instance.
   * @param kind kind or {@code null} for none
   */
  public DatabaseInstance setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The name of the instance which will act as master in the replication setup.
   * @return value or {@code null} for none
   */
  public java.lang.String getMasterInstanceName() {
    return masterInstanceName;
  }

  /**
   * The name of the instance which will act as master in the replication setup.
   * @param masterInstanceName masterInstanceName or {@code null} for none
   */
  public DatabaseInstance setMasterInstanceName(java.lang.String masterInstanceName) {
    this.masterInstanceName = masterInstanceName;
    return this;
  }

  /**
   * The maximum disk size of the instance in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxDiskSize() {
    return maxDiskSize;
  }

  /**
   * The maximum disk size of the instance in bytes.
   * @param maxDiskSize maxDiskSize or {@code null} for none
   */
  public DatabaseInstance setMaxDiskSize(java.lang.Long maxDiskSize) {
    this.maxDiskSize = maxDiskSize;
    return this;
  }

  /**
   * The project ID of the project containing the Cloud SQL instance. The Google apps domain is
   * prefixed if applicable.
   * @return value or {@code null} for none
   */
  public java.lang.String getProject() {
    return project;
  }

  /**
   * The project ID of the project containing the Cloud SQL instance. The Google apps domain is
   * prefixed if applicable.
   * @param project project or {@code null} for none
   */
  public DatabaseInstance setProject(java.lang.String project) {
    this.project = project;
    return this;
  }

  /**
   * The geographical region. Can be us-central, asia-east1 or europe-west1. Defaults to us-central.
   * The region can not be changed after instance creation.
   * @return value or {@code null} for none
   */
  public java.lang.String getRegion() {
    return region;
  }

  /**
   * The geographical region. Can be us-central, asia-east1 or europe-west1. Defaults to us-central.
   * The region can not be changed after instance creation.
   * @param region region or {@code null} for none
   */
  public DatabaseInstance setRegion(java.lang.String region) {
    this.region = region;
    return this;
  }

  /**
   * The replicas of the instance.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getReplicaNames() {
    return replicaNames;
  }

  /**
   * The replicas of the instance.
   * @param replicaNames replicaNames or {@code null} for none
   */
  public DatabaseInstance setReplicaNames(java.util.List<java.lang.String> replicaNames) {
    this.replicaNames = replicaNames;
    return this;
  }

  /**
   * SSL configuration.
   * @return value or {@code null} for none
   */
  public SslCert getServerCaCert() {
    return serverCaCert;
  }

  /**
   * SSL configuration.
   * @param serverCaCert serverCaCert or {@code null} for none
   */
  public DatabaseInstance setServerCaCert(SslCert serverCaCert) {
    this.serverCaCert = serverCaCert;
    return this;
  }

  /**
   * The service account email address assigned to the instance.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceAccountEmailAddress() {
    return serviceAccountEmailAddress;
  }

  /**
   * The service account email address assigned to the instance.
   * @param serviceAccountEmailAddress serviceAccountEmailAddress or {@code null} for none
   */
  public DatabaseInstance setServiceAccountEmailAddress(java.lang.String serviceAccountEmailAddress) {
    this.serviceAccountEmailAddress = serviceAccountEmailAddress;
    return this;
  }

  /**
   * The user settings.
   * @return value or {@code null} for none
   */
  public Settings getSettings() {
    return settings;
  }

  /**
   * The user settings.
   * @param settings settings or {@code null} for none
   */
  public DatabaseInstance setSettings(Settings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * The current serving state of the Cloud SQL instance. This can be one of the following.
   * RUNNABLE: The instance is running, or is ready to run when accessed. SUSPENDED: The instance is
   * not available, for example due to problems with billing. PENDING_CREATE: The instance is being
   * created. MAINTENANCE: The instance is down for maintenance. UNKNOWN_STATE: The state of the
   * instance is unknown.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * The current serving state of the Cloud SQL instance. This can be one of the following.
   * RUNNABLE: The instance is running, or is ready to run when accessed. SUSPENDED: The instance is
   * not available, for example due to problems with billing. PENDING_CREATE: The instance is being
   * created. MAINTENANCE: The instance is down for maintenance. UNKNOWN_STATE: The state of the
   * instance is unknown.
   * @param state state or {@code null} for none
   */
  public DatabaseInstance setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public DatabaseInstance set(String fieldName, Object value) {
    return (DatabaseInstance) super.set(fieldName, value);
  }

  @Override
  public DatabaseInstance clone() {
    return (DatabaseInstance) super.clone();
  }

}
