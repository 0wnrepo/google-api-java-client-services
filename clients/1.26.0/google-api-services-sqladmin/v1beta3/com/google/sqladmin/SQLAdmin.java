/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.sqladmin;

/**
 * Service definition for SQLAdmin (v1beta3).
 *
 * <p>
 * Cloud SQL provides the Cloud SQL Admin API, a REST API for administering your instances programmatically.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/sql/docs/reference/latest" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SQLAdminRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class SQLAdmin extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.26.0-SNAPSHOT of the Cloud SQL Admin API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "sql/v1beta3/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/sqladmin/v1beta3";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public SQLAdmin(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  SQLAdmin(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the BackupRuns collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SQLAdmin sqladmin = new SQLAdmin(...);}
   *   {@code SQLAdmin.BackupRuns.List request = sqladmin.backupRuns().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public BackupRuns backupRuns() {
    return new BackupRuns();
  }

  /**
   * The "backupRuns" collection of methods.
   */
  public class BackupRuns {

    /**
     * Retrieves information about a specified backup run for a Cloud SQL instance.
     *
     * Create a request for the method "backupRuns.get".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param backupConfiguration Identifier for the backup configuration. This gets generated automatically when a backup
     *        configuration is created.
     * @param dueTime The start time of the four-hour backup window. The backup can occur any time in the window. The time
     *        is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
     * @return the request
     */
    public Get get(java.lang.String project, java.lang.String instance, java.lang.String backupConfiguration, java.lang.String dueTime) throws java.io.IOException {
      Get result = new Get(project, instance, backupConfiguration, dueTime);
      initialize(result);
      return result;
    }

    public class Get extends SQLAdminRequest<com.google.sqladmin.model.BackupRun> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/backupRuns/{backupConfiguration}";

      /**
       * Retrieves information about a specified backup run for a Cloud SQL instance.
       *
       * Create a request for the method "backupRuns.get".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param backupConfiguration Identifier for the backup configuration. This gets generated automatically when a backup
     *        configuration is created.
       * @param dueTime The start time of the four-hour backup window. The backup can occur any time in the window. The time
     *        is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
       * @since 1.13
       */
      protected Get(java.lang.String project, java.lang.String instance, java.lang.String backupConfiguration, java.lang.String dueTime) {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.BackupRun.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
        this.backupConfiguration = com.google.api.client.util.Preconditions.checkNotNull(backupConfiguration, "Required parameter backupConfiguration must be specified.");
        this.dueTime = com.google.api.client.util.Preconditions.checkNotNull(dueTime, "Required parameter dueTime must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public Get setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Get setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      /**
       * Identifier for the backup configuration. This gets generated automatically when a backup
       * configuration is created.
       */
      @com.google.api.client.util.Key
      private java.lang.String backupConfiguration;

      /** Identifier for the backup configuration. This gets generated automatically when a backup
     configuration is created.
       */
      public java.lang.String getBackupConfiguration() {
        return backupConfiguration;
      }

      /**
       * Identifier for the backup configuration. This gets generated automatically when a backup
       * configuration is created.
       */
      public Get setBackupConfiguration(java.lang.String backupConfiguration) {
        this.backupConfiguration = backupConfiguration;
        return this;
      }

      /**
       * The start time of the four-hour backup window. The backup can occur any time in the window.
       * The time is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
       */
      @com.google.api.client.util.Key
      private java.lang.String dueTime;

      /** The start time of the four-hour backup window. The backup can occur any time in the window. The
     time is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
       */
      public java.lang.String getDueTime() {
        return dueTime;
      }

      /**
       * The start time of the four-hour backup window. The backup can occur any time in the window.
       * The time is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
       */
      public Get setDueTime(java.lang.String dueTime) {
        this.dueTime = dueTime;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists all backup runs associated with a Cloud SQL instance.
     *
     * Create a request for the method "backupRuns.list".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param backupConfiguration Identifier for the backup configuration. This gets generated automatically when a backup
     *        configuration is created.
     * @return the request
     */
    public List list(java.lang.String project, java.lang.String instance, java.lang.String backupConfiguration) throws java.io.IOException {
      List result = new List(project, instance, backupConfiguration);
      initialize(result);
      return result;
    }

    public class List extends SQLAdminRequest<com.google.sqladmin.model.BackupRunsListResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/backupRuns";

      /**
       * Lists all backup runs associated with a Cloud SQL instance.
       *
       * Create a request for the method "backupRuns.list".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param backupConfiguration Identifier for the backup configuration. This gets generated automatically when a backup
     *        configuration is created.
       * @since 1.13
       */
      protected List(java.lang.String project, java.lang.String instance, java.lang.String backupConfiguration) {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.BackupRunsListResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
        this.backupConfiguration = com.google.api.client.util.Preconditions.checkNotNull(backupConfiguration, "Required parameter backupConfiguration must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public List setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public List setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      /**
       * Identifier for the backup configuration. This gets generated automatically when a backup
       * configuration is created.
       */
      @com.google.api.client.util.Key
      private java.lang.String backupConfiguration;

      /** Identifier for the backup configuration. This gets generated automatically when a backup
     configuration is created.
       */
      public java.lang.String getBackupConfiguration() {
        return backupConfiguration;
      }

      /**
       * Identifier for the backup configuration. This gets generated automatically when a backup
       * configuration is created.
       */
      public List setBackupConfiguration(java.lang.String backupConfiguration) {
        this.backupConfiguration = backupConfiguration;
        return this;
      }

      /** Maximum number of backup runs per response. */
      @com.google.api.client.util.Key
      private java.lang.Integer maxResults;

      /** Maximum number of backup runs per response.
       */
      public java.lang.Integer getMaxResults() {
        return maxResults;
      }

      /** Maximum number of backup runs per response. */
      public List setMaxResults(java.lang.Integer maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * A previously-returned page token representing part of the larger set of results to view.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A previously-returned page token representing part of the larger set of results to view.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A previously-returned page token representing part of the larger set of results to view.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Flags collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SQLAdmin sqladmin = new SQLAdmin(...);}
   *   {@code SQLAdmin.Flags.List request = sqladmin.flags().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Flags flags() {
    return new Flags();
  }

  /**
   * The "flags" collection of methods.
   */
  public class Flags {

    /**
     * Lists all database flags that can be set for Google Cloud SQL instances.
     *
     * Create a request for the method "flags.list".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends SQLAdminRequest<com.google.sqladmin.model.FlagsListResponse> {

      private static final String REST_PATH = "flags";

      /**
       * Lists all database flags that can be set for Google Cloud SQL instances.
       *
       * Create a request for the method "flags.list".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.FlagsListResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Instances collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SQLAdmin sqladmin = new SQLAdmin(...);}
   *   {@code SQLAdmin.Instances.List request = sqladmin.instances().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Instances instances() {
    return new Instances();
  }

  /**
   * The "instances" collection of methods.
   */
  public class Instances {

    /**
     * Creates a Cloud SQL instance as a clone of a source instance.
     *
     * Create a request for the method "instances.clone".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Clone#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the source as well as the clone Cloud SQL instance.
     * @param content the {@link com.google.sqladmin.model.InstancesCloneRequest}
     * @return the request
     */
    public Clone clone(java.lang.String project, com.google.sqladmin.model.InstancesCloneRequest content) throws java.io.IOException {
      Clone result = new Clone(project, content);
      initialize(result);
      return result;
    }

    public class Clone extends SQLAdminRequest<com.google.sqladmin.model.InstancesCloneResponse> {

      private static final String REST_PATH = "projects/{project}/instances/clone";

      /**
       * Creates a Cloud SQL instance as a clone of a source instance.
       *
       * Create a request for the method "instances.clone".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Clone#execute()} method to invoke the remote operation.
       * <p> {@link
       * Clone#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the source as well as the clone Cloud SQL instance.
       * @param content the {@link com.google.sqladmin.model.InstancesCloneRequest}
       * @since 1.13
       */
      protected Clone(java.lang.String project, com.google.sqladmin.model.InstancesCloneRequest content) {
        super(SQLAdmin.this, "POST", REST_PATH, content, com.google.sqladmin.model.InstancesCloneResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
      }

      @Override
      public Clone setAlt(java.lang.String alt) {
        return (Clone) super.setAlt(alt);
      }

      @Override
      public Clone setFields(java.lang.String fields) {
        return (Clone) super.setFields(fields);
      }

      @Override
      public Clone setKey(java.lang.String key) {
        return (Clone) super.setKey(key);
      }

      @Override
      public Clone setOauthToken(java.lang.String oauthToken) {
        return (Clone) super.setOauthToken(oauthToken);
      }

      @Override
      public Clone setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Clone) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Clone setQuotaUser(java.lang.String quotaUser) {
        return (Clone) super.setQuotaUser(quotaUser);
      }

      @Override
      public Clone setUserIp(java.lang.String userIp) {
        return (Clone) super.setUserIp(userIp);
      }

      /** Project ID of the source as well as the clone Cloud SQL instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the source as well as the clone Cloud SQL instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the source as well as the clone Cloud SQL instance. */
      public Clone setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      @Override
      public Clone set(String parameterName, Object value) {
        return (Clone) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a Cloud SQL instance.
     *
     * Create a request for the method "instances.delete".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance to be deleted.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @return the request
     */
    public Delete delete(java.lang.String project, java.lang.String instance) throws java.io.IOException {
      Delete result = new Delete(project, instance);
      initialize(result);
      return result;
    }

    public class Delete extends SQLAdminRequest<com.google.sqladmin.model.InstancesDeleteResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}";

      /**
       * Deletes a Cloud SQL instance.
       *
       * Create a request for the method "instances.delete".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance to be deleted.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @since 1.13
       */
      protected Delete(java.lang.String project, java.lang.String instance) {
        super(SQLAdmin.this, "DELETE", REST_PATH, null, com.google.sqladmin.model.InstancesDeleteResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance to be deleted. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance to be deleted.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance to be deleted. */
      public Delete setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Delete setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Exports data from a Cloud SQL instance to a Google Cloud Storage bucket as a MySQL dump file.
     *
     * Create a request for the method "instances.export".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Export#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance to be exported.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param content the {@link com.google.sqladmin.model.InstancesExportRequest}
     * @return the request
     */
    public Export export(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.InstancesExportRequest content) throws java.io.IOException {
      Export result = new Export(project, instance, content);
      initialize(result);
      return result;
    }

    public class Export extends SQLAdminRequest<com.google.sqladmin.model.InstancesExportResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/export";

      /**
       * Exports data from a Cloud SQL instance to a Google Cloud Storage bucket as a MySQL dump file.
       *
       * Create a request for the method "instances.export".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Export#execute()} method to invoke the remote operation.
       * <p> {@link
       * Export#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance to be exported.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param content the {@link com.google.sqladmin.model.InstancesExportRequest}
       * @since 1.13
       */
      protected Export(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.InstancesExportRequest content) {
        super(SQLAdmin.this, "POST", REST_PATH, content, com.google.sqladmin.model.InstancesExportResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public Export setAlt(java.lang.String alt) {
        return (Export) super.setAlt(alt);
      }

      @Override
      public Export setFields(java.lang.String fields) {
        return (Export) super.setFields(fields);
      }

      @Override
      public Export setKey(java.lang.String key) {
        return (Export) super.setKey(key);
      }

      @Override
      public Export setOauthToken(java.lang.String oauthToken) {
        return (Export) super.setOauthToken(oauthToken);
      }

      @Override
      public Export setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Export) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Export setQuotaUser(java.lang.String quotaUser) {
        return (Export) super.setQuotaUser(quotaUser);
      }

      @Override
      public Export setUserIp(java.lang.String userIp) {
        return (Export) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance to be exported. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance to be exported.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance to be exported. */
      public Export setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Export setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public Export set(String parameterName, Object value) {
        return (Export) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves information about a Cloud SQL instance.
     *
     * Create a request for the method "instances.get".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Database instance ID. This does not include the project ID.
     * @return the request
     */
    public Get get(java.lang.String project, java.lang.String instance) throws java.io.IOException {
      Get result = new Get(project, instance);
      initialize(result);
      return result;
    }

    public class Get extends SQLAdminRequest<com.google.sqladmin.model.DatabaseInstance> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}";

      /**
       * Retrieves information about a Cloud SQL instance.
       *
       * Create a request for the method "instances.get".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Database instance ID. This does not include the project ID.
       * @since 1.13
       */
      protected Get(java.lang.String project, java.lang.String instance) {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.DatabaseInstance.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public Get setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Database instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Database instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Database instance ID. This does not include the project ID. */
      public Get setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Imports data into a Cloud SQL instance from a MySQL dump file stored in a Google Cloud Storage
     * bucket.
     *
     * Create a request for the method "instances.import".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link SQLAdminImport#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param content the {@link com.google.sqladmin.model.InstancesImportRequest}
     * @return the request
     */
    public SQLAdminImport sqladminImport(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.InstancesImportRequest content) throws java.io.IOException {
      SQLAdminImport result = new SQLAdminImport(project, instance, content);
      initialize(result);
      return result;
    }

    public class SQLAdminImport extends SQLAdminRequest<com.google.sqladmin.model.InstancesImportResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/import";

      /**
       * Imports data into a Cloud SQL instance from a MySQL dump file stored in a Google Cloud Storage
       * bucket.
       *
       * Create a request for the method "instances.import".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link SQLAdminImport#execute()} method to invoke the remote
       * operation. <p> {@link SQLAdminImport#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param content the {@link com.google.sqladmin.model.InstancesImportRequest}
       * @since 1.13
       */
      protected SQLAdminImport(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.InstancesImportRequest content) {
        super(SQLAdmin.this, "POST", REST_PATH, content, com.google.sqladmin.model.InstancesImportResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public SQLAdminImport setAlt(java.lang.String alt) {
        return (SQLAdminImport) super.setAlt(alt);
      }

      @Override
      public SQLAdminImport setFields(java.lang.String fields) {
        return (SQLAdminImport) super.setFields(fields);
      }

      @Override
      public SQLAdminImport setKey(java.lang.String key) {
        return (SQLAdminImport) super.setKey(key);
      }

      @Override
      public SQLAdminImport setOauthToken(java.lang.String oauthToken) {
        return (SQLAdminImport) super.setOauthToken(oauthToken);
      }

      @Override
      public SQLAdminImport setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SQLAdminImport) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SQLAdminImport setQuotaUser(java.lang.String quotaUser) {
        return (SQLAdminImport) super.setQuotaUser(quotaUser);
      }

      @Override
      public SQLAdminImport setUserIp(java.lang.String userIp) {
        return (SQLAdminImport) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public SQLAdminImport setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public SQLAdminImport setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public SQLAdminImport set(String parameterName, Object value) {
        return (SQLAdminImport) super.set(parameterName, value);
      }
    }
    /**
     * Creates a new Cloud SQL instance.
     *
     * Create a request for the method "instances.insert".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project to which the newly created Cloud SQL instances should belong.
     * @param content the {@link com.google.sqladmin.model.DatabaseInstance}
     * @return the request
     */
    public Insert insert(java.lang.String project, com.google.sqladmin.model.DatabaseInstance content) throws java.io.IOException {
      Insert result = new Insert(project, content);
      initialize(result);
      return result;
    }

    public class Insert extends SQLAdminRequest<com.google.sqladmin.model.InstancesInsertResponse> {

      private static final String REST_PATH = "projects/{project}/instances";

      /**
       * Creates a new Cloud SQL instance.
       *
       * Create a request for the method "instances.insert".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project to which the newly created Cloud SQL instances should belong.
       * @param content the {@link com.google.sqladmin.model.DatabaseInstance}
       * @since 1.13
       */
      protected Insert(java.lang.String project, com.google.sqladmin.model.DatabaseInstance content) {
        super(SQLAdmin.this, "POST", REST_PATH, content, com.google.sqladmin.model.InstancesInsertResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /**
       * Project ID of the project to which the newly created Cloud SQL instances should belong.
       */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project to which the newly created Cloud SQL instances should belong.
       */
      public java.lang.String getProject() {
        return project;
      }

      /**
       * Project ID of the project to which the newly created Cloud SQL instances should belong.
       */
      public Insert setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Lists instances for a given project, in alphabetical order by instance name.
     *
     * Create a request for the method "instances.list".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project for which to list Cloud SQL instances.
     * @return the request
     */
    public List list(java.lang.String project) throws java.io.IOException {
      List result = new List(project);
      initialize(result);
      return result;
    }

    public class List extends SQLAdminRequest<com.google.sqladmin.model.InstancesListResponse> {

      private static final String REST_PATH = "projects/{project}/instances";

      /**
       * Lists instances for a given project, in alphabetical order by instance name.
       *
       * Create a request for the method "instances.list".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project for which to list Cloud SQL instances.
       * @since 1.13
       */
      protected List(java.lang.String project) {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.InstancesListResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Project ID of the project for which to list Cloud SQL instances. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project for which to list Cloud SQL instances.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project for which to list Cloud SQL instances. */
      public List setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** The maximum number of results to return per response. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of results to return per response.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of results to return per response. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * A previously-returned page token representing part of the larger set of results to view.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A previously-returned page token representing part of the larger set of results to view.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A previously-returned page token representing part of the larger set of results to view.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates the settings of a Cloud SQL instance. This method supports patch semantics.
     *
     * Create a request for the method "instances.patch".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param content the {@link com.google.sqladmin.model.DatabaseInstance}
     * @return the request
     */
    public Patch patch(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.DatabaseInstance content) throws java.io.IOException {
      Patch result = new Patch(project, instance, content);
      initialize(result);
      return result;
    }

    public class Patch extends SQLAdminRequest<com.google.sqladmin.model.InstancesUpdateResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}";

      /**
       * Updates the settings of a Cloud SQL instance. This method supports patch semantics.
       *
       * Create a request for the method "instances.patch".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param content the {@link com.google.sqladmin.model.DatabaseInstance}
       * @since 1.13
       */
      protected Patch(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.DatabaseInstance content) {
        super(SQLAdmin.this, "PATCH", REST_PATH, content, com.google.sqladmin.model.InstancesUpdateResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public Patch setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Patch setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Promotes the read replica instance to be a stand-alone Cloud SQL instance.
     *
     * Create a request for the method "instances.promoteReplica".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link PromoteReplica#execute()} method to invoke the remote operation.
     *
     * @param project ID of the project that contains the read replica.
     * @param instance Cloud SQL read replica instance name.
     * @return the request
     */
    public PromoteReplica promoteReplica(java.lang.String project, java.lang.String instance) throws java.io.IOException {
      PromoteReplica result = new PromoteReplica(project, instance);
      initialize(result);
      return result;
    }

    public class PromoteReplica extends SQLAdminRequest<com.google.sqladmin.model.InstancesPromoteReplicaResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/promoteReplica";

      /**
       * Promotes the read replica instance to be a stand-alone Cloud SQL instance.
       *
       * Create a request for the method "instances.promoteReplica".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link PromoteReplica#execute()} method to invoke the remote
       * operation. <p> {@link PromoteReplica#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param project ID of the project that contains the read replica.
       * @param instance Cloud SQL read replica instance name.
       * @since 1.13
       */
      protected PromoteReplica(java.lang.String project, java.lang.String instance) {
        super(SQLAdmin.this, "POST", REST_PATH, null, com.google.sqladmin.model.InstancesPromoteReplicaResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public PromoteReplica setAlt(java.lang.String alt) {
        return (PromoteReplica) super.setAlt(alt);
      }

      @Override
      public PromoteReplica setFields(java.lang.String fields) {
        return (PromoteReplica) super.setFields(fields);
      }

      @Override
      public PromoteReplica setKey(java.lang.String key) {
        return (PromoteReplica) super.setKey(key);
      }

      @Override
      public PromoteReplica setOauthToken(java.lang.String oauthToken) {
        return (PromoteReplica) super.setOauthToken(oauthToken);
      }

      @Override
      public PromoteReplica setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (PromoteReplica) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public PromoteReplica setQuotaUser(java.lang.String quotaUser) {
        return (PromoteReplica) super.setQuotaUser(quotaUser);
      }

      @Override
      public PromoteReplica setUserIp(java.lang.String userIp) {
        return (PromoteReplica) super.setUserIp(userIp);
      }

      /** ID of the project that contains the read replica. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** ID of the project that contains the read replica.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** ID of the project that contains the read replica. */
      public PromoteReplica setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL read replica instance name. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL read replica instance name.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL read replica instance name. */
      public PromoteReplica setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public PromoteReplica set(String parameterName, Object value) {
        return (PromoteReplica) super.set(parameterName, value);
      }
    }
    /**
     * Deletes all client certificates and generates a new server SSL certificate for a Cloud SQL
     * instance.
     *
     * Create a request for the method "instances.resetSslConfig".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link ResetSslConfig#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @return the request
     */
    public ResetSslConfig resetSslConfig(java.lang.String project, java.lang.String instance) throws java.io.IOException {
      ResetSslConfig result = new ResetSslConfig(project, instance);
      initialize(result);
      return result;
    }

    public class ResetSslConfig extends SQLAdminRequest<com.google.sqladmin.model.InstancesResetSslConfigResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/resetSslConfig";

      /**
       * Deletes all client certificates and generates a new server SSL certificate for a Cloud SQL
       * instance.
       *
       * Create a request for the method "instances.resetSslConfig".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link ResetSslConfig#execute()} method to invoke the remote
       * operation. <p> {@link ResetSslConfig#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @since 1.13
       */
      protected ResetSslConfig(java.lang.String project, java.lang.String instance) {
        super(SQLAdmin.this, "POST", REST_PATH, null, com.google.sqladmin.model.InstancesResetSslConfigResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public ResetSslConfig setAlt(java.lang.String alt) {
        return (ResetSslConfig) super.setAlt(alt);
      }

      @Override
      public ResetSslConfig setFields(java.lang.String fields) {
        return (ResetSslConfig) super.setFields(fields);
      }

      @Override
      public ResetSslConfig setKey(java.lang.String key) {
        return (ResetSslConfig) super.setKey(key);
      }

      @Override
      public ResetSslConfig setOauthToken(java.lang.String oauthToken) {
        return (ResetSslConfig) super.setOauthToken(oauthToken);
      }

      @Override
      public ResetSslConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ResetSslConfig) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ResetSslConfig setQuotaUser(java.lang.String quotaUser) {
        return (ResetSslConfig) super.setQuotaUser(quotaUser);
      }

      @Override
      public ResetSslConfig setUserIp(java.lang.String userIp) {
        return (ResetSslConfig) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public ResetSslConfig setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public ResetSslConfig setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public ResetSslConfig set(String parameterName, Object value) {
        return (ResetSslConfig) super.set(parameterName, value);
      }
    }
    /**
     * Restarts a Cloud SQL instance.
     *
     * Create a request for the method "instances.restart".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Restart#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance to be restarted.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @return the request
     */
    public Restart restart(java.lang.String project, java.lang.String instance) throws java.io.IOException {
      Restart result = new Restart(project, instance);
      initialize(result);
      return result;
    }

    public class Restart extends SQLAdminRequest<com.google.sqladmin.model.InstancesRestartResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/restart";

      /**
       * Restarts a Cloud SQL instance.
       *
       * Create a request for the method "instances.restart".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Restart#execute()} method to invoke the remote operation.
       * <p> {@link
       * Restart#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance to be restarted.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @since 1.13
       */
      protected Restart(java.lang.String project, java.lang.String instance) {
        super(SQLAdmin.this, "POST", REST_PATH, null, com.google.sqladmin.model.InstancesRestartResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public Restart setAlt(java.lang.String alt) {
        return (Restart) super.setAlt(alt);
      }

      @Override
      public Restart setFields(java.lang.String fields) {
        return (Restart) super.setFields(fields);
      }

      @Override
      public Restart setKey(java.lang.String key) {
        return (Restart) super.setKey(key);
      }

      @Override
      public Restart setOauthToken(java.lang.String oauthToken) {
        return (Restart) super.setOauthToken(oauthToken);
      }

      @Override
      public Restart setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Restart) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Restart setQuotaUser(java.lang.String quotaUser) {
        return (Restart) super.setQuotaUser(quotaUser);
      }

      @Override
      public Restart setUserIp(java.lang.String userIp) {
        return (Restart) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance to be restarted. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance to be restarted.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance to be restarted. */
      public Restart setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Restart setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public Restart set(String parameterName, Object value) {
        return (Restart) super.set(parameterName, value);
      }
    }
    /**
     * Restores a backup of a Cloud SQL instance.
     *
     * Create a request for the method "instances.restoreBackup".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link RestoreBackup#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param backupConfiguration The identifier of the backup configuration. This gets generated automatically when a backup
     *        configuration is created.
     * @param dueTime The start time of the four-hour backup window. The backup can occur any time in the window. The time
     *        is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
     * @return the request
     */
    public RestoreBackup restoreBackup(java.lang.String project, java.lang.String instance, java.lang.String backupConfiguration, java.lang.String dueTime) throws java.io.IOException {
      RestoreBackup result = new RestoreBackup(project, instance, backupConfiguration, dueTime);
      initialize(result);
      return result;
    }

    public class RestoreBackup extends SQLAdminRequest<com.google.sqladmin.model.InstancesRestoreBackupResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/restoreBackup";

      /**
       * Restores a backup of a Cloud SQL instance.
       *
       * Create a request for the method "instances.restoreBackup".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link RestoreBackup#execute()} method to invoke the remote
       * operation. <p> {@link RestoreBackup#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param backupConfiguration The identifier of the backup configuration. This gets generated automatically when a backup
     *        configuration is created.
       * @param dueTime The start time of the four-hour backup window. The backup can occur any time in the window. The time
     *        is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
       * @since 1.13
       */
      protected RestoreBackup(java.lang.String project, java.lang.String instance, java.lang.String backupConfiguration, java.lang.String dueTime) {
        super(SQLAdmin.this, "POST", REST_PATH, null, com.google.sqladmin.model.InstancesRestoreBackupResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
        this.backupConfiguration = com.google.api.client.util.Preconditions.checkNotNull(backupConfiguration, "Required parameter backupConfiguration must be specified.");
        this.dueTime = com.google.api.client.util.Preconditions.checkNotNull(dueTime, "Required parameter dueTime must be specified.");
      }

      @Override
      public RestoreBackup setAlt(java.lang.String alt) {
        return (RestoreBackup) super.setAlt(alt);
      }

      @Override
      public RestoreBackup setFields(java.lang.String fields) {
        return (RestoreBackup) super.setFields(fields);
      }

      @Override
      public RestoreBackup setKey(java.lang.String key) {
        return (RestoreBackup) super.setKey(key);
      }

      @Override
      public RestoreBackup setOauthToken(java.lang.String oauthToken) {
        return (RestoreBackup) super.setOauthToken(oauthToken);
      }

      @Override
      public RestoreBackup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RestoreBackup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RestoreBackup setQuotaUser(java.lang.String quotaUser) {
        return (RestoreBackup) super.setQuotaUser(quotaUser);
      }

      @Override
      public RestoreBackup setUserIp(java.lang.String userIp) {
        return (RestoreBackup) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public RestoreBackup setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public RestoreBackup setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      /**
       * The identifier of the backup configuration. This gets generated automatically when a backup
       * configuration is created.
       */
      @com.google.api.client.util.Key
      private java.lang.String backupConfiguration;

      /** The identifier of the backup configuration. This gets generated automatically when a backup
     configuration is created.
       */
      public java.lang.String getBackupConfiguration() {
        return backupConfiguration;
      }

      /**
       * The identifier of the backup configuration. This gets generated automatically when a backup
       * configuration is created.
       */
      public RestoreBackup setBackupConfiguration(java.lang.String backupConfiguration) {
        this.backupConfiguration = backupConfiguration;
        return this;
      }

      /**
       * The start time of the four-hour backup window. The backup can occur any time in the window.
       * The time is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
       */
      @com.google.api.client.util.Key
      private java.lang.String dueTime;

      /** The start time of the four-hour backup window. The backup can occur any time in the window. The
     time is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
       */
      public java.lang.String getDueTime() {
        return dueTime;
      }

      /**
       * The start time of the four-hour backup window. The backup can occur any time in the window.
       * The time is in RFC 3339 format, for example 2012-11-15T16:19:00.094Z.
       */
      public RestoreBackup setDueTime(java.lang.String dueTime) {
        this.dueTime = dueTime;
        return this;
      }

      @Override
      public RestoreBackup set(String parameterName, Object value) {
        return (RestoreBackup) super.set(parameterName, value);
      }
    }
    /**
     * Sets the password for the root user of the specified Cloud SQL instance.
     *
     * Create a request for the method "instances.setRootPassword".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link SetRootPassword#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param content the {@link com.google.sqladmin.model.InstanceSetRootPasswordRequest}
     * @return the request
     */
    public SetRootPassword setRootPassword(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.InstanceSetRootPasswordRequest content) throws java.io.IOException {
      SetRootPassword result = new SetRootPassword(project, instance, content);
      initialize(result);
      return result;
    }

    public class SetRootPassword extends SQLAdminRequest<com.google.sqladmin.model.InstancesSetRootPasswordResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/setRootPassword";

      /**
       * Sets the password for the root user of the specified Cloud SQL instance.
       *
       * Create a request for the method "instances.setRootPassword".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link SetRootPassword#execute()} method to invoke the remote
       * operation. <p> {@link SetRootPassword#initialize(com.google.api.client.googleapis.services.Abst
       * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param content the {@link com.google.sqladmin.model.InstanceSetRootPasswordRequest}
       * @since 1.13
       */
      protected SetRootPassword(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.InstanceSetRootPasswordRequest content) {
        super(SQLAdmin.this, "POST", REST_PATH, content, com.google.sqladmin.model.InstancesSetRootPasswordResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public SetRootPassword setAlt(java.lang.String alt) {
        return (SetRootPassword) super.setAlt(alt);
      }

      @Override
      public SetRootPassword setFields(java.lang.String fields) {
        return (SetRootPassword) super.setFields(fields);
      }

      @Override
      public SetRootPassword setKey(java.lang.String key) {
        return (SetRootPassword) super.setKey(key);
      }

      @Override
      public SetRootPassword setOauthToken(java.lang.String oauthToken) {
        return (SetRootPassword) super.setOauthToken(oauthToken);
      }

      @Override
      public SetRootPassword setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SetRootPassword) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SetRootPassword setQuotaUser(java.lang.String quotaUser) {
        return (SetRootPassword) super.setQuotaUser(quotaUser);
      }

      @Override
      public SetRootPassword setUserIp(java.lang.String userIp) {
        return (SetRootPassword) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public SetRootPassword setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public SetRootPassword setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public SetRootPassword set(String parameterName, Object value) {
        return (SetRootPassword) super.set(parameterName, value);
      }
    }
    /**
     * Updates the settings of a Cloud SQL instance.
     *
     * Create a request for the method "instances.update".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param content the {@link com.google.sqladmin.model.DatabaseInstance}
     * @return the request
     */
    public Update update(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.DatabaseInstance content) throws java.io.IOException {
      Update result = new Update(project, instance, content);
      initialize(result);
      return result;
    }

    public class Update extends SQLAdminRequest<com.google.sqladmin.model.InstancesUpdateResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}";

      /**
       * Updates the settings of a Cloud SQL instance.
       *
       * Create a request for the method "instances.update".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param content the {@link com.google.sqladmin.model.DatabaseInstance}
       * @since 1.13
       */
      protected Update(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.DatabaseInstance content) {
        super(SQLAdmin.this, "PUT", REST_PATH, content, com.google.sqladmin.model.InstancesUpdateResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public Update setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Update setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Operations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SQLAdmin sqladmin = new SQLAdmin(...);}
   *   {@code SQLAdmin.Operations.List request = sqladmin.operations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Operations operations() {
    return new Operations();
  }

  /**
   * The "operations" collection of methods.
   */
  public class Operations {

    /**
     * Retrieves information about a specific operation that was performed on a Cloud SQL instance.
     *
     * Create a request for the method "operations.get".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param operation Instance operation ID.
     * @return the request
     */
    public Get get(java.lang.String project, java.lang.String instance, java.lang.String operation) throws java.io.IOException {
      Get result = new Get(project, instance, operation);
      initialize(result);
      return result;
    }

    public class Get extends SQLAdminRequest<com.google.sqladmin.model.InstanceOperation> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/operations/{operation}";

      /**
       * Retrieves information about a specific operation that was performed on a Cloud SQL instance.
       *
       * Create a request for the method "operations.get".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param operation Instance operation ID.
       * @since 1.13
       */
      protected Get(java.lang.String project, java.lang.String instance, java.lang.String operation) {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.InstanceOperation.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
        this.operation = com.google.api.client.util.Preconditions.checkNotNull(operation, "Required parameter operation must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public Get setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Get setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      /** Instance operation ID. */
      @com.google.api.client.util.Key
      private java.lang.String operation;

      /** Instance operation ID.
       */
      public java.lang.String getOperation() {
        return operation;
      }

      /** Instance operation ID. */
      public Get setOperation(java.lang.String operation) {
        this.operation = operation;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists all operations that have been performed on a Cloud SQL instance.
     *
     * Create a request for the method "operations.list".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @return the request
     */
    public List list(java.lang.String project, java.lang.String instance) throws java.io.IOException {
      List result = new List(project, instance);
      initialize(result);
      return result;
    }

    public class List extends SQLAdminRequest<com.google.sqladmin.model.OperationsListResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/operations";

      /**
       * Lists all operations that have been performed on a Cloud SQL instance.
       *
       * Create a request for the method "operations.list".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @since 1.13
       */
      protected List(java.lang.String project, java.lang.String instance) {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.OperationsListResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public List setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public List setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      /** Maximum number of operations per response. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of operations per response.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of operations per response. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * A previously-returned page token representing part of the larger set of results to view.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A previously-returned page token representing part of the larger set of results to view.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A previously-returned page token representing part of the larger set of results to view.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the SslCerts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SQLAdmin sqladmin = new SQLAdmin(...);}
   *   {@code SQLAdmin.SslCerts.List request = sqladmin.sslCerts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public SslCerts sslCerts() {
    return new SslCerts();
  }

  /**
   * The "sslCerts" collection of methods.
   */
  public class SslCerts {

    /**
     * Deletes an SSL certificate from a Cloud SQL instance.
     *
     * Create a request for the method "sslCerts.delete".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance to be deleted.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param sha1Fingerprint Sha1 FingerPrint.
     * @return the request
     */
    public Delete delete(java.lang.String project, java.lang.String instance, java.lang.String sha1Fingerprint) throws java.io.IOException {
      Delete result = new Delete(project, instance, sha1Fingerprint);
      initialize(result);
      return result;
    }

    public class Delete extends SQLAdminRequest<com.google.sqladmin.model.SslCertsDeleteResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}";

      /**
       * Deletes an SSL certificate from a Cloud SQL instance.
       *
       * Create a request for the method "sslCerts.delete".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance to be deleted.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param sha1Fingerprint Sha1 FingerPrint.
       * @since 1.13
       */
      protected Delete(java.lang.String project, java.lang.String instance, java.lang.String sha1Fingerprint) {
        super(SQLAdmin.this, "DELETE", REST_PATH, null, com.google.sqladmin.model.SslCertsDeleteResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
        this.sha1Fingerprint = com.google.api.client.util.Preconditions.checkNotNull(sha1Fingerprint, "Required parameter sha1Fingerprint must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance to be deleted. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance to be deleted.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance to be deleted. */
      public Delete setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Delete setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      /** Sha1 FingerPrint. */
      @com.google.api.client.util.Key
      private java.lang.String sha1Fingerprint;

      /** Sha1 FingerPrint.
       */
      public java.lang.String getSha1Fingerprint() {
        return sha1Fingerprint;
      }

      /** Sha1 FingerPrint. */
      public Delete setSha1Fingerprint(java.lang.String sha1Fingerprint) {
        this.sha1Fingerprint = sha1Fingerprint;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves an SSL certificate as specified by its SHA-1 fingerprint.
     *
     * Create a request for the method "sslCerts.get".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project that contains the instance.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param sha1Fingerprint Sha1 FingerPrint.
     * @return the request
     */
    public Get get(java.lang.String project, java.lang.String instance, java.lang.String sha1Fingerprint) throws java.io.IOException {
      Get result = new Get(project, instance, sha1Fingerprint);
      initialize(result);
      return result;
    }

    public class Get extends SQLAdminRequest<com.google.sqladmin.model.SslCert> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}";

      /**
       * Retrieves an SSL certificate as specified by its SHA-1 fingerprint.
       *
       * Create a request for the method "sslCerts.get".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project that contains the instance.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param sha1Fingerprint Sha1 FingerPrint.
       * @since 1.13
       */
      protected Get(java.lang.String project, java.lang.String instance, java.lang.String sha1Fingerprint) {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.SslCert.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
        this.sha1Fingerprint = com.google.api.client.util.Preconditions.checkNotNull(sha1Fingerprint, "Required parameter sha1Fingerprint must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Project ID of the project that contains the instance. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project that contains the instance.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project that contains the instance. */
      public Get setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Get setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      /** Sha1 FingerPrint. */
      @com.google.api.client.util.Key
      private java.lang.String sha1Fingerprint;

      /** Sha1 FingerPrint.
       */
      public java.lang.String getSha1Fingerprint() {
        return sha1Fingerprint;
      }

      /** Sha1 FingerPrint. */
      public Get setSha1Fingerprint(java.lang.String sha1Fingerprint) {
        this.sha1Fingerprint = sha1Fingerprint;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Creates an SSL certificate and returns the certificate, the associated private key, and the
     * server certificate authority.
     *
     * Create a request for the method "sslCerts.insert".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project to which the newly created Cloud SQL instances should belong.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @param content the {@link com.google.sqladmin.model.SslCertsInsertRequest}
     * @return the request
     */
    public Insert insert(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.SslCertsInsertRequest content) throws java.io.IOException {
      Insert result = new Insert(project, instance, content);
      initialize(result);
      return result;
    }

    public class Insert extends SQLAdminRequest<com.google.sqladmin.model.SslCertsInsertResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/sslCerts";

      /**
       * Creates an SSL certificate and returns the certificate, the associated private key, and the
       * server certificate authority.
       *
       * Create a request for the method "sslCerts.insert".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project to which the newly created Cloud SQL instances should belong.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @param content the {@link com.google.sqladmin.model.SslCertsInsertRequest}
       * @since 1.13
       */
      protected Insert(java.lang.String project, java.lang.String instance, com.google.sqladmin.model.SslCertsInsertRequest content) {
        super(SQLAdmin.this, "POST", REST_PATH, content, com.google.sqladmin.model.SslCertsInsertResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /**
       * Project ID of the project to which the newly created Cloud SQL instances should belong.
       */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project to which the newly created Cloud SQL instances should belong.
       */
      public java.lang.String getProject() {
        return project;
      }

      /**
       * Project ID of the project to which the newly created Cloud SQL instances should belong.
       */
      public Insert setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public Insert setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Lists all of the current SSL certificates defined for a Cloud SQL instance.
     *
     * Create a request for the method "sslCerts.list".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project for which to list Cloud SQL instances.
     * @param instance Cloud SQL instance ID. This does not include the project ID.
     * @return the request
     */
    public List list(java.lang.String project, java.lang.String instance) throws java.io.IOException {
      List result = new List(project, instance);
      initialize(result);
      return result;
    }

    public class List extends SQLAdminRequest<com.google.sqladmin.model.SslCertsListResponse> {

      private static final String REST_PATH = "projects/{project}/instances/{instance}/sslCerts";

      /**
       * Lists all of the current SSL certificates defined for a Cloud SQL instance.
       *
       * Create a request for the method "sslCerts.list".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project for which to list Cloud SQL instances.
       * @param instance Cloud SQL instance ID. This does not include the project ID.
       * @since 1.13
       */
      protected List(java.lang.String project, java.lang.String instance) {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.SslCertsListResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        this.instance = com.google.api.client.util.Preconditions.checkNotNull(instance, "Required parameter instance must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Project ID of the project for which to list Cloud SQL instances. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project for which to list Cloud SQL instances.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project for which to list Cloud SQL instances. */
      public List setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      @com.google.api.client.util.Key
      private java.lang.String instance;

      /** Cloud SQL instance ID. This does not include the project ID.
       */
      public java.lang.String getInstance() {
        return instance;
      }

      /** Cloud SQL instance ID. This does not include the project ID. */
      public List setInstance(java.lang.String instance) {
        this.instance = instance;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Tiers collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SQLAdmin sqladmin = new SQLAdmin(...);}
   *   {@code SQLAdmin.Tiers.List request = sqladmin.tiers().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Tiers tiers() {
    return new Tiers();
  }

  /**
   * The "tiers" collection of methods.
   */
  public class Tiers {

    /**
     * Lists service tiers that can be used to create Google Cloud SQL instances.
     *
     * Create a request for the method "tiers.list".
     *
     * This request holds the parameters needed by the sqladmin server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param project Project ID of the project for which to list tiers.
     * @return the request
     */
    public List list(java.lang.String project) throws java.io.IOException {
      List result = new List(project);
      initialize(result);
      return result;
    }

    public class List extends SQLAdminRequest<com.google.sqladmin.model.TiersListResponse> {

      private static final String REST_PATH = "projects/{project}/tiers";

      /**
       * Lists service tiers that can be used to create Google Cloud SQL instances.
       *
       * Create a request for the method "tiers.list".
       *
       * This request holds the parameters needed by the the sqladmin server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project Project ID of the project for which to list tiers.
       * @since 1.13
       */
      protected List(java.lang.String project) {
        super(SQLAdmin.this, "GET", REST_PATH, null, com.google.sqladmin.model.TiersListResponse.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Project ID of the project for which to list tiers. */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** Project ID of the project for which to list tiers.
       */
      public java.lang.String getProject() {
        return project;
      }

      /** Project ID of the project for which to list tiers. */
      public List setProject(java.lang.String project) {
        this.project = project;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link SQLAdmin}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link SQLAdmin}. */
    @Override
    public SQLAdmin build() {
      return new SQLAdmin(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SQLAdminRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSQLAdminRequestInitializer(
        SQLAdminRequestInitializer sqladminRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(sqladminRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
