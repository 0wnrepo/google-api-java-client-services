/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.serviceusage.v1beta1.model;

/**
 * Defines the Media configuration for a service in case of a download. Use this only for Scotty
 * Requests. Do not use this for media support using Bytestream, add instead
 * [][google.bytestream.RestByteStream] as an API to your configuration for Bytestream methods.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Service Usage API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MediaDownload extends com.google.api.client.json.GenericJson {

  /**
   * A boolean that determines whether a notification for the completion of a download should be
   * sent to the backend.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean completeNotification;

  /**
   * DO NOT USE FIELDS BELOW THIS LINE UNTIL THIS WARNING IS REMOVED.
   *
   * Specify name of the download service if one is used for download.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String downloadService;

  /**
   * Name of the Scotty dropzone to use for the current API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dropzone;

  /**
   * Whether download is enabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enabled;

  /**
   * Optional maximum acceptable size for direct download. The size is specified in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long maxDirectDownloadSize;

  /**
   * A boolean that determines if direct download from ESF should be used for download of this
   * media.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useDirectDownload;

  /**
   * A boolean that determines whether a notification for the completion of a download should be
   * sent to the backend.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCompleteNotification() {
    return completeNotification;
  }

  /**
   * A boolean that determines whether a notification for the completion of a download should be
   * sent to the backend.
   * @param completeNotification completeNotification or {@code null} for none
   */
  public MediaDownload setCompleteNotification(java.lang.Boolean completeNotification) {
    this.completeNotification = completeNotification;
    return this;
  }

  /**
   * DO NOT USE FIELDS BELOW THIS LINE UNTIL THIS WARNING IS REMOVED.
   *
   * Specify name of the download service if one is used for download.
   * @return value or {@code null} for none
   */
  public java.lang.String getDownloadService() {
    return downloadService;
  }

  /**
   * DO NOT USE FIELDS BELOW THIS LINE UNTIL THIS WARNING IS REMOVED.
   *
   * Specify name of the download service if one is used for download.
   * @param downloadService downloadService or {@code null} for none
   */
  public MediaDownload setDownloadService(java.lang.String downloadService) {
    this.downloadService = downloadService;
    return this;
  }

  /**
   * Name of the Scotty dropzone to use for the current API.
   * @return value or {@code null} for none
   */
  public java.lang.String getDropzone() {
    return dropzone;
  }

  /**
   * Name of the Scotty dropzone to use for the current API.
   * @param dropzone dropzone or {@code null} for none
   */
  public MediaDownload setDropzone(java.lang.String dropzone) {
    this.dropzone = dropzone;
    return this;
  }

  /**
   * Whether download is enabled.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnabled() {
    return enabled;
  }

  /**
   * Whether download is enabled.
   * @param enabled enabled or {@code null} for none
   */
  public MediaDownload setEnabled(java.lang.Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Optional maximum acceptable size for direct download. The size is specified in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxDirectDownloadSize() {
    return maxDirectDownloadSize;
  }

  /**
   * Optional maximum acceptable size for direct download. The size is specified in bytes.
   * @param maxDirectDownloadSize maxDirectDownloadSize or {@code null} for none
   */
  public MediaDownload setMaxDirectDownloadSize(java.lang.Long maxDirectDownloadSize) {
    this.maxDirectDownloadSize = maxDirectDownloadSize;
    return this;
  }

  /**
   * A boolean that determines if direct download from ESF should be used for download of this
   * media.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseDirectDownload() {
    return useDirectDownload;
  }

  /**
   * A boolean that determines if direct download from ESF should be used for download of this
   * media.
   * @param useDirectDownload useDirectDownload or {@code null} for none
   */
  public MediaDownload setUseDirectDownload(java.lang.Boolean useDirectDownload) {
    this.useDirectDownload = useDirectDownload;
    return this;
  }

  @Override
  public MediaDownload set(String fieldName, Object value) {
    return (MediaDownload) super.set(fieldName, value);
  }

  @Override
  public MediaDownload clone() {
    return (MediaDownload) super.clone();
  }

}
